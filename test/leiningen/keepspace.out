;!zprint {:format :skip}
(defn tstfn
  "This fn is designed to see if reader macros, specifically the
  anonymous fn one, works. Also tests uneval formatting."
  [a b c] (let [d a e b f c] (map #(println %) b)) (if (and :a :b)
    [:a :b :c :aaaaaaaaaaaaa :bbbbbbbbbbbbbbb :ccccccccccccc :ddddddddd :eeeeeeeeeee :ffffffff]
    #_(concat (list :averylongkeyword :anotherverylongkeyword :athirdverylongkeywor :afourthone :fifthone :sixthone))))

; This is a comment

;; This is another comment
;; and a second contiguous comment

;; Test keeping left space
;!zprint {:format :next :parse {:left-space :keep}}
    (defn tstfn2
      "This is a second function."
      [a b c]
      (let [d a e b f c] (map #(println %) b))
      (if (and :a :b)
        [:a :b :c :aaaaaaaaaaaaa :bbbbbbbbbbbbbbb :ccccccccccccc :ddddddddd
         :eeeeeeeeeee :ffffffff]
        #_(concat (list :averylongkeyword :anotherverylongkeyword
                        :athirdverylongkeywor :afourthone
                        :fifthone :sixthone))))

; this one should have no left space

(defn tstfn3
  "This is a second function."
  [a b c]
  (let [d a e b f c] (map #(println %) b))
  (if (and :a :b)
    [:a :b :c :aaaaaaaaaaaaa :bbbbbbbbbbbbbbb :ccccccccccccc :ddddddddd
     :eeeeeeeeeee :ffffffff]
    #_(concat (list :averylongkeyword :anotherverylongkeyword
                    :athirdverylongkeywor :afourthone
                    :fifthone :sixthone))))

; do it for the rest of the files
;!zprint {:parse {:left-space :keep}}

            (defn tstfn4
              "This is a second function."
              [a b c]
              (let [d a e b f c] (map #(println %) b))
              (if (and :a :b)
                [:a :b :c :aaaaaaaaaaaaa :bbbbbbbbbbbbbbb :ccccccccccccc
                 :ddddddddd :eeeeeeeeeee :ffffffff]
                #_(concat (list :averylongkeyword :anotherverylongkeyword
                                :athirdverylongkeywor :afourthone
                                :fifthone :sixthone))))

                  (defn tstfn5
                    "This is a second function."
                    [a b c]
                    (let [d a e b f c] (map #(println %) b))
                    (if (and :a :b)
                      [:a :b :c :aaaaaaaaaaaaa :bbbbbbbbbbbbbbb :ccccccccccccc
                       :ddddddddd :eeeeeeeeeee :ffffffff]
                      #_(concat (list :averylongkeyword :anotherverylongkeyword
                                      :athirdverylongkeywor :afourthone
                                      :fifthone :sixthone))))



